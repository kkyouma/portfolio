---
// ThemeToggle.astro
---

<button id="theme-toggle" class="theme-toggle" aria-label="Toggle theme">
  <!-- NEW Moon Icon (shown when theme is light) -->
  <!-- Attributes adjusted: removed width, height, fill; added class; path fill set to currentColor -->
  <svg
    class="moon"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 -960 960 960"
    aria-hidden="true"
    focusable="false"
  >
    <path
      d="M480-120q-150 0-255-105T120-480q0-150 105-255t255-105q14 0 27.5 1t26.5 3q-41 29-65.5 75.5T444-660q0 90 63 153t153 63q55 0 101-24.5t75-65.5q2 13 3 26.5t1 27.5q0 150-105 255T480-120Zm0-80q88 0 158-48.5T740-375q-20 5-40 8t-40 3q-123 0-209.5-86.5T364-660q0-20 3-40t8-40q-78 32-126.5 102T200-480q0 116 82 198t198 82Zm-10-270Z"
      fill="currentColor"></path>
  </svg>

  <!-- EXISTING Sun Icon (shown when theme is dark) -->
  <!-- Attributes adjusted: added aria-hidden and focusable -->
  <svg
    class="sun"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    aria-hidden="true"
    focusable="false"
  >
    <circle cx="12" cy="12" r="5"></circle>
    <line x1="12" y1="1" x2="12" y2="3"></line>
    <line x1="12" y1="21" x2="12" y2="23"></line>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
    <line x1="1" y1="12" x2="3" y2="12"></line>
    <line x1="21" y1="12" x2="23" y2="12"></line>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
  </svg>
</button>

<script>
  // Execute on client side
  const initTheme = () => {
    const rootElement = document.documentElement;
    const themeToggle = document.getElementById("theme-toggle");

    if (!themeToggle) {
      console.warn("Theme toggle button not found");
      return;
    }

    // Function to update theme state (DOM classes, data attribute, local storage)
    const applyTheme = (theme) => {
      rootElement.classList.remove("light-theme", "dark-theme", "system-theme");
      if (theme === "light") {
        rootElement.classList.add("light-theme");
        rootElement.setAttribute("data-theme", "light");
        localStorage.setItem("theme", "light-theme");
      } else {
        // 'dark' or 'system' defaulting to dark
        rootElement.classList.add("dark-theme"); // Use dark-theme for visual styling
        rootElement.setAttribute("data-theme", "dark");
        localStorage.setItem("theme", "dark-theme"); // Store preference as dark
      }
    };

    // Check for saved theme
    const savedTheme = localStorage.getItem("theme");

    if (savedTheme) {
      applyTheme(savedTheme === "light-theme" ? "light" : "dark");
    } else {
      // No saved theme, check system preference
      const prefersDark =
        window.matchMedia &&
        window.matchMedia("(prefers-color-scheme: dark)").matches;
      applyTheme(prefersDark ? "dark" : "light");
      // Optionally add a 'system-theme' class if you need to differentiate
      // rootElement.classList.add("system-theme");
      // Note: Storing the resolved theme (light/dark) is often simpler.
    }

    // Toggle theme on button click
    themeToggle.addEventListener("click", () => {
      const isLightTheme = rootElement.classList.contains("light-theme");
      applyTheme(isLightTheme ? "dark" : "light");
    });

    // Listen for system theme changes (optional, but good practice)
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (event) => {
        // Only update if no theme is explicitly saved (or if you want system to override)
        if (!localStorage.getItem("theme")) {
          applyTheme(event.matches ? "dark" : "light");
        }
      });
  };

  // Run immediately and also on view transitions
  // Use try/catch for safety during transitions or potential errors
  try {
    initTheme();
  } catch (e) {
    console.error("Failed to initialize theme:", e);
  }
  document.addEventListener("astro:after-swap", initTheme);
</script>

<style>
  .theme-toggle {
    border: 1px solid var(--border-color);
    color: var(--text-muted); /* SVG color will inherit this */
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    padding: 0; /* Remove default button padding */
    overflow: hidden; /* Ensure SVGs don't overflow */
    z-index: 100;
    transition:
      background-color 0.2s ease,
      transform 0.2s ease,
      color 0.2s ease; /* Add color transition */
  }

  .theme-toggle:hover {
    background: var(--hover-bg);
  }

  /* Icons for theme toggle */
  .theme-toggle .moon,
  .theme-toggle .sun {
    width: 16px; /* Control size via CSS */
    height: 16px; /* Control size via CSS */
    /* Removed fixed width/height from SVG tags */
    transition: opacity 0.3s ease; /* Optional: add transition for icon swap */
  }

  /* Ensure only one icon is visible at a time */
  .theme-toggle .moon,
  .theme-toggle .sun {
    position: absolute; /* Allow icons to stack */
  }

  /* Show/hide icons based on theme */

  /* When theme is DARK (or default/system interpreted as dark): show SUN */
  :root:not(.light-theme) .theme-toggle .sun {
    /* display: block; */
    opacity: 1;
    pointer-events: auto;
  }

  :root:not(.light-theme) .theme-toggle .moon {
    /* display: none; */
    opacity: 0;
    pointer-events: none;
  }

  /* When theme is LIGHT: show MOON */
  :root.light-theme .theme-toggle .sun {
    /* display: none; */
    opacity: 0;
    pointer-events: none;
  }

  :root.light-theme .theme-toggle .moon {
    /* display: block; */
    opacity: 1;
    pointer-events: auto;
  }
</style>
